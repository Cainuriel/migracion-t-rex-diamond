/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IComplianceErrors,
  IComplianceErrorsInterface,
} from "../../../../contracts/interfaces/errors/IComplianceErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "parameter",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "InvalidComplianceParameter",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "newBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxBalance",
        type: "uint256",
      },
    ],
    name: "MaxBalanceExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "currentInvestors",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxInvestors",
        type: "uint256",
      },
    ],
    name: "MaxInvestorsExceeded",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "newBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minBalance",
        type: "uint256",
      },
    ],
    name: "MinBalanceViolated",
    type: "error",
  },
] as const;

export class IComplianceErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IComplianceErrorsInterface {
    return new Interface(_abi) as IComplianceErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IComplianceErrors {
    return new Contract(address, _abi, runner) as unknown as IComplianceErrors;
  }
}
