/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IRolesErrors,
  IRolesErrorsInterface,
} from "../../../../contracts/interfaces/errors/IRolesErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "agent",
        type: "address",
      },
    ],
    name: "AgentAlreadySet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "agent",
        type: "address",
      },
    ],
    name: "AgentNotSet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "currentOwner",
        type: "address",
      },
    ],
    name: "SameOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
] as const;

export class IRolesErrors__factory {
  static readonly abi = _abi;
  static createInterface(): IRolesErrorsInterface {
    return new Interface(_abi) as IRolesErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IRolesErrors {
    return new Contract(address, _abi, runner) as unknown as IRolesErrors;
  }
}
