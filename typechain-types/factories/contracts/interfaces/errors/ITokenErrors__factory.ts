/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ITokenErrors,
  ITokenErrorsInterface,
} from "../../../../contracts/interfaces/errors/ITokenErrors";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "FrozenAccount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requested",
        type: "uint256",
      },
    ],
    name: "InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "available",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requested",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAmount",
    type: "error",
  },
] as const;

export class ITokenErrors__factory {
  static readonly abi = _abi;
  static createInterface(): ITokenErrorsInterface {
    return new Interface(_abi) as ITokenErrorsInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ITokenErrors {
    return new Contract(address, _abi, runner) as unknown as ITokenErrors;
  }
}
