/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IdentityFacetExternalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deleteIdentity"
      | "getIdentity"
      | "getInvestorCountry"
      | "isVerified"
      | "registerIdentity"
      | "selectorsIntrospection"
      | "updateCountry"
      | "updateIdentity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CountryUpdated"
      | "IdentityRegistered"
      | "IdentityRemoved"
      | "IdentityUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deleteIdentity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestorCountry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVerified",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIdentity",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selectorsIntrospection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateCountry",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIdentity",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "deleteIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestorCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isVerified", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectorsIntrospection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCountry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIdentity",
    data: BytesLike
  ): Result;
}

export namespace CountryUpdatedEvent {
  export type InputTuple = [investor: AddressLike, country: BigNumberish];
  export type OutputTuple = [investor: string, country: bigint];
  export interface OutputObject {
    investor: string;
    country: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdentityRegisteredEvent {
  export type InputTuple = [
    investor: AddressLike,
    identity: AddressLike,
    country: BigNumberish
  ];
  export type OutputTuple = [
    investor: string,
    identity: string,
    country: bigint
  ];
  export interface OutputObject {
    investor: string;
    identity: string;
    country: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdentityRemovedEvent {
  export type InputTuple = [investor: AddressLike];
  export type OutputTuple = [investor: string];
  export interface OutputObject {
    investor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdentityUpdatedEvent {
  export type InputTuple = [investor: AddressLike, newIdentity: AddressLike];
  export type OutputTuple = [investor: string, newIdentity: string];
  export interface OutputObject {
    investor: string;
    newIdentity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IdentityFacetExternal extends BaseContract {
  connect(runner?: ContractRunner | null): IdentityFacetExternal;
  waitForDeployment(): Promise<this>;

  interface: IdentityFacetExternalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deleteIdentity: TypedContractMethod<
    [investor: AddressLike],
    [void],
    "nonpayable"
  >;

  getIdentity: TypedContractMethod<[investor: AddressLike], [string], "view">;

  getInvestorCountry: TypedContractMethod<
    [investor: AddressLike],
    [bigint],
    "view"
  >;

  isVerified: TypedContractMethod<[user: AddressLike], [boolean], "view">;

  registerIdentity: TypedContractMethod<
    [investor: AddressLike, identity: AddressLike, country: BigNumberish],
    [void],
    "nonpayable"
  >;

  selectorsIntrospection: TypedContractMethod<[], [string[]], "view">;

  updateCountry: TypedContractMethod<
    [investor: AddressLike, newCountry: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateIdentity: TypedContractMethod<
    [investor: AddressLike, newIdentity: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deleteIdentity"
  ): TypedContractMethod<[investor: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getIdentity"
  ): TypedContractMethod<[investor: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getInvestorCountry"
  ): TypedContractMethod<[investor: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isVerified"
  ): TypedContractMethod<[user: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerIdentity"
  ): TypedContractMethod<
    [investor: AddressLike, identity: AddressLike, country: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectorsIntrospection"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "updateCountry"
  ): TypedContractMethod<
    [investor: AddressLike, newCountry: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateIdentity"
  ): TypedContractMethod<
    [investor: AddressLike, newIdentity: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CountryUpdated"
  ): TypedContractEvent<
    CountryUpdatedEvent.InputTuple,
    CountryUpdatedEvent.OutputTuple,
    CountryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "IdentityRegistered"
  ): TypedContractEvent<
    IdentityRegisteredEvent.InputTuple,
    IdentityRegisteredEvent.OutputTuple,
    IdentityRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "IdentityRemoved"
  ): TypedContractEvent<
    IdentityRemovedEvent.InputTuple,
    IdentityRemovedEvent.OutputTuple,
    IdentityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "IdentityUpdated"
  ): TypedContractEvent<
    IdentityUpdatedEvent.InputTuple,
    IdentityUpdatedEvent.OutputTuple,
    IdentityUpdatedEvent.OutputObject
  >;

  filters: {
    "CountryUpdated(address,uint16)": TypedContractEvent<
      CountryUpdatedEvent.InputTuple,
      CountryUpdatedEvent.OutputTuple,
      CountryUpdatedEvent.OutputObject
    >;
    CountryUpdated: TypedContractEvent<
      CountryUpdatedEvent.InputTuple,
      CountryUpdatedEvent.OutputTuple,
      CountryUpdatedEvent.OutputObject
    >;

    "IdentityRegistered(address,address,uint16)": TypedContractEvent<
      IdentityRegisteredEvent.InputTuple,
      IdentityRegisteredEvent.OutputTuple,
      IdentityRegisteredEvent.OutputObject
    >;
    IdentityRegistered: TypedContractEvent<
      IdentityRegisteredEvent.InputTuple,
      IdentityRegisteredEvent.OutputTuple,
      IdentityRegisteredEvent.OutputObject
    >;

    "IdentityRemoved(address)": TypedContractEvent<
      IdentityRemovedEvent.InputTuple,
      IdentityRemovedEvent.OutputTuple,
      IdentityRemovedEvent.OutputObject
    >;
    IdentityRemoved: TypedContractEvent<
      IdentityRemovedEvent.InputTuple,
      IdentityRemovedEvent.OutputTuple,
      IdentityRemovedEvent.OutputObject
    >;

    "IdentityUpdated(address,address)": TypedContractEvent<
      IdentityUpdatedEvent.InputTuple,
      IdentityUpdatedEvent.OutputTuple,
      IdentityUpdatedEvent.OutputObject
    >;
    IdentityUpdated: TypedContractEvent<
      IdentityUpdatedEvent.InputTuple,
      IdentityUpdatedEvent.OutputTuple,
      IdentityUpdatedEvent.OutputObject
    >;
  };
}
