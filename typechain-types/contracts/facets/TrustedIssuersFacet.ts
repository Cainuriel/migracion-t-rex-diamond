/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TrustedIssuersFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTrustedIssuer"
      | "getTrustedIssuers"
      | "removeTrustedIssuer"
      | "selectorsIntrospection"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TrustedIssuerAdded" | "TrustedIssuerRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTrustedIssuer",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedIssuers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedIssuer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "selectorsIntrospection",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectorsIntrospection",
    data: BytesLike
  ): Result;
}

export namespace TrustedIssuerAddedEvent {
  export type InputTuple = [issuer: AddressLike, claimTopics: BigNumberish[]];
  export type OutputTuple = [issuer: string, claimTopics: bigint[]];
  export interface OutputObject {
    issuer: string;
    claimTopics: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedIssuerRemovedEvent {
  export type InputTuple = [issuer: AddressLike];
  export type OutputTuple = [issuer: string];
  export interface OutputObject {
    issuer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TrustedIssuersFacet extends BaseContract {
  connect(runner?: ContractRunner | null): TrustedIssuersFacet;
  waitForDeployment(): Promise<this>;

  interface: TrustedIssuersFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTrustedIssuer: TypedContractMethod<
    [issuer: AddressLike, topics: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getTrustedIssuers: TypedContractMethod<
    [topic: BigNumberish],
    [string[]],
    "view"
  >;

  removeTrustedIssuer: TypedContractMethod<
    [issuer: AddressLike, topic: BigNumberish],
    [void],
    "nonpayable"
  >;

  selectorsIntrospection: TypedContractMethod<[], [string[]], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTrustedIssuer"
  ): TypedContractMethod<
    [issuer: AddressLike, topics: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getTrustedIssuers"
  ): TypedContractMethod<[topic: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "removeTrustedIssuer"
  ): TypedContractMethod<
    [issuer: AddressLike, topic: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectorsIntrospection"
  ): TypedContractMethod<[], [string[]], "view">;

  getEvent(
    key: "TrustedIssuerAdded"
  ): TypedContractEvent<
    TrustedIssuerAddedEvent.InputTuple,
    TrustedIssuerAddedEvent.OutputTuple,
    TrustedIssuerAddedEvent.OutputObject
  >;
  getEvent(
    key: "TrustedIssuerRemoved"
  ): TypedContractEvent<
    TrustedIssuerRemovedEvent.InputTuple,
    TrustedIssuerRemovedEvent.OutputTuple,
    TrustedIssuerRemovedEvent.OutputObject
  >;

  filters: {
    "TrustedIssuerAdded(address,uint256[])": TypedContractEvent<
      TrustedIssuerAddedEvent.InputTuple,
      TrustedIssuerAddedEvent.OutputTuple,
      TrustedIssuerAddedEvent.OutputObject
    >;
    TrustedIssuerAdded: TypedContractEvent<
      TrustedIssuerAddedEvent.InputTuple,
      TrustedIssuerAddedEvent.OutputTuple,
      TrustedIssuerAddedEvent.OutputObject
    >;

    "TrustedIssuerRemoved(address)": TypedContractEvent<
      TrustedIssuerRemovedEvent.InputTuple,
      TrustedIssuerRemovedEvent.OutputTuple,
      TrustedIssuerRemovedEvent.OutputObject
    >;
    TrustedIssuerRemoved: TypedContractEvent<
      TrustedIssuerRemovedEvent.InputTuple,
      TrustedIssuerRemovedEvent.OutputTuple,
      TrustedIssuerRemovedEvent.OutputObject
    >;
  };
}
