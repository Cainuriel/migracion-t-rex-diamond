/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MultiDomainStorageAccessorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getStorageNamespace"
      | "getStorageStatus"
      | "getStorageVersion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getStorageNamespace",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStorageVersion",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getStorageNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStorageStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStorageVersion",
    data: BytesLike
  ): Result;
}

export interface MultiDomainStorageAccessor extends BaseContract {
  connect(runner?: ContractRunner | null): MultiDomainStorageAccessor;
  waitForDeployment(): Promise<this>;

  interface: MultiDomainStorageAccessorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getStorageNamespace: TypedContractMethod<[], [string], "view">;

  getStorageStatus: TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        token: boolean;
        roles: boolean;
        compliance: boolean;
      }
    ],
    "view"
  >;

  getStorageVersion: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getStorageNamespace"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStorageStatus"
  ): TypedContractMethod<
    [],
    [
      [boolean, boolean, boolean] & {
        token: boolean;
        roles: boolean;
        compliance: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStorageVersion"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
