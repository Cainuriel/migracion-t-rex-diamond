/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IERC735Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addClaim"
      | "getClaim"
      | "getClaimIdsByTopic"
      | "removeClaim"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ClaimAdded" | "ClaimChanged" | "ClaimRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addClaim",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "getClaim", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getClaimIdsByTopic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeClaim",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimIdsByTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeClaim",
    data: BytesLike
  ): Result;
}

export namespace ClaimAddedEvent {
  export type InputTuple = [
    claimId: BytesLike,
    topic: BigNumberish,
    scheme: BigNumberish,
    issuer: AddressLike,
    signature: BytesLike,
    data: BytesLike,
    uri: string
  ];
  export type OutputTuple = [
    claimId: string,
    topic: bigint,
    scheme: bigint,
    issuer: string,
    signature: string,
    data: string,
    uri: string
  ];
  export interface OutputObject {
    claimId: string;
    topic: bigint;
    scheme: bigint;
    issuer: string;
    signature: string;
    data: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimChangedEvent {
  export type InputTuple = [
    claimId: BytesLike,
    topic: BigNumberish,
    scheme: BigNumberish,
    issuer: AddressLike,
    signature: BytesLike,
    data: BytesLike,
    uri: string
  ];
  export type OutputTuple = [
    claimId: string,
    topic: bigint,
    scheme: bigint,
    issuer: string,
    signature: string,
    data: string,
    uri: string
  ];
  export interface OutputObject {
    claimId: string;
    topic: bigint;
    scheme: bigint;
    issuer: string;
    signature: string;
    data: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRemovedEvent {
  export type InputTuple = [
    claimId: BytesLike,
    topic: BigNumberish,
    scheme: BigNumberish,
    issuer: AddressLike,
    signature: BytesLike,
    data: BytesLike,
    uri: string
  ];
  export type OutputTuple = [
    claimId: string,
    topic: bigint,
    scheme: bigint,
    issuer: string,
    signature: string,
    data: string,
    uri: string
  ];
  export interface OutputObject {
    claimId: string;
    topic: bigint;
    scheme: bigint;
    issuer: string;
    signature: string;
    data: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IERC735 extends BaseContract {
  connect(runner?: ContractRunner | null): IERC735;
  waitForDeployment(): Promise<this>;

  interface: IERC735Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addClaim: TypedContractMethod<
    [
      _topic: BigNumberish,
      _scheme: BigNumberish,
      issuer: AddressLike,
      _signature: BytesLike,
      _data: BytesLike,
      _uri: string
    ],
    [string],
    "nonpayable"
  >;

  getClaim: TypedContractMethod<
    [_claimId: BytesLike],
    [
      [bigint, bigint, string, string, string, string] & {
        topic: bigint;
        scheme: bigint;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    ],
    "view"
  >;

  getClaimIdsByTopic: TypedContractMethod<
    [_topic: BigNumberish],
    [string[]],
    "view"
  >;

  removeClaim: TypedContractMethod<
    [_claimId: BytesLike],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addClaim"
  ): TypedContractMethod<
    [
      _topic: BigNumberish,
      _scheme: BigNumberish,
      issuer: AddressLike,
      _signature: BytesLike,
      _data: BytesLike,
      _uri: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [_claimId: BytesLike],
    [
      [bigint, bigint, string, string, string, string] & {
        topic: bigint;
        scheme: bigint;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimIdsByTopic"
  ): TypedContractMethod<[_topic: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "removeClaim"
  ): TypedContractMethod<[_claimId: BytesLike], [boolean], "nonpayable">;

  getEvent(
    key: "ClaimAdded"
  ): TypedContractEvent<
    ClaimAddedEvent.InputTuple,
    ClaimAddedEvent.OutputTuple,
    ClaimAddedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimChanged"
  ): TypedContractEvent<
    ClaimChangedEvent.InputTuple,
    ClaimChangedEvent.OutputTuple,
    ClaimChangedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRemoved"
  ): TypedContractEvent<
    ClaimRemovedEvent.InputTuple,
    ClaimRemovedEvent.OutputTuple,
    ClaimRemovedEvent.OutputObject
  >;

  filters: {
    "ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)": TypedContractEvent<
      ClaimAddedEvent.InputTuple,
      ClaimAddedEvent.OutputTuple,
      ClaimAddedEvent.OutputObject
    >;
    ClaimAdded: TypedContractEvent<
      ClaimAddedEvent.InputTuple,
      ClaimAddedEvent.OutputTuple,
      ClaimAddedEvent.OutputObject
    >;

    "ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)": TypedContractEvent<
      ClaimChangedEvent.InputTuple,
      ClaimChangedEvent.OutputTuple,
      ClaimChangedEvent.OutputObject
    >;
    ClaimChanged: TypedContractEvent<
      ClaimChangedEvent.InputTuple,
      ClaimChangedEvent.OutputTuple,
      ClaimChangedEvent.OutputObject
    >;

    "ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)": TypedContractEvent<
      ClaimRemovedEvent.InputTuple,
      ClaimRemovedEvent.OutputTuple,
      ClaimRemovedEvent.OutputObject
    >;
    ClaimRemoved: TypedContractEvent<
      ClaimRemovedEvent.InputTuple,
      ClaimRemovedEvent.OutputTuple,
      ClaimRemovedEvent.OutputObject
    >;
  };
}
