/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IIdFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTokenFactory"
      | "createIdentity"
      | "createIdentityWithManagementKeys"
      | "createTokenIdentity"
      | "getIdentity"
      | "getToken"
      | "getWallets"
      | "implementationAuthority"
      | "isSaltTaken"
      | "isTokenFactory"
      | "linkWallet"
      | "removeTokenFactory"
      | "unlinkWallet"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deployed"
      | "TokenFactoryAdded"
      | "TokenFactoryRemoved"
      | "TokenLinked"
      | "WalletLinked"
      | "WalletUnlinked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTokenFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createIdentity",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createIdentityWithManagementKeys",
    values: [AddressLike, string, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createTokenIdentity",
    values: [AddressLike, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getIdentity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWallets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "implementationAuthority",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isSaltTaken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isTokenFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkWallet",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createIdentityWithManagementKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTokenIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIdentity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWallets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "implementationAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSaltTaken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "linkWallet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkWallet",
    data: BytesLike
  ): Result;
}

export namespace DeployedEvent {
  export type InputTuple = [_addr: AddressLike];
  export type OutputTuple = [_addr: string];
  export interface OutputObject {
    _addr: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenFactoryAddedEvent {
  export type InputTuple = [factory: AddressLike];
  export type OutputTuple = [factory: string];
  export interface OutputObject {
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenFactoryRemovedEvent {
  export type InputTuple = [factory: AddressLike];
  export type OutputTuple = [factory: string];
  export interface OutputObject {
    factory: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenLinkedEvent {
  export type InputTuple = [token: AddressLike, identity: AddressLike];
  export type OutputTuple = [token: string, identity: string];
  export interface OutputObject {
    token: string;
    identity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletLinkedEvent {
  export type InputTuple = [wallet: AddressLike, identity: AddressLike];
  export type OutputTuple = [wallet: string, identity: string];
  export interface OutputObject {
    wallet: string;
    identity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletUnlinkedEvent {
  export type InputTuple = [wallet: AddressLike, identity: AddressLike];
  export type OutputTuple = [wallet: string, identity: string];
  export interface OutputObject {
    wallet: string;
    identity: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IIdFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IIdFactory;
  waitForDeployment(): Promise<this>;

  interface: IIdFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTokenFactory: TypedContractMethod<
    [_factory: AddressLike],
    [void],
    "nonpayable"
  >;

  createIdentity: TypedContractMethod<
    [_wallet: AddressLike, _salt: string],
    [string],
    "nonpayable"
  >;

  createIdentityWithManagementKeys: TypedContractMethod<
    [_wallet: AddressLike, _salt: string, _managementKeys: BytesLike[]],
    [string],
    "nonpayable"
  >;

  createTokenIdentity: TypedContractMethod<
    [_token: AddressLike, _tokenOwner: AddressLike, _salt: string],
    [string],
    "nonpayable"
  >;

  getIdentity: TypedContractMethod<[_wallet: AddressLike], [string], "view">;

  getToken: TypedContractMethod<[_identity: AddressLike], [string], "view">;

  getWallets: TypedContractMethod<[_identity: AddressLike], [string[]], "view">;

  implementationAuthority: TypedContractMethod<[], [string], "view">;

  isSaltTaken: TypedContractMethod<[_salt: string], [boolean], "view">;

  isTokenFactory: TypedContractMethod<
    [_factory: AddressLike],
    [boolean],
    "view"
  >;

  linkWallet: TypedContractMethod<
    [_newWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  removeTokenFactory: TypedContractMethod<
    [_factory: AddressLike],
    [void],
    "nonpayable"
  >;

  unlinkWallet: TypedContractMethod<
    [_oldWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTokenFactory"
  ): TypedContractMethod<[_factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createIdentity"
  ): TypedContractMethod<
    [_wallet: AddressLike, _salt: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createIdentityWithManagementKeys"
  ): TypedContractMethod<
    [_wallet: AddressLike, _salt: string, _managementKeys: BytesLike[]],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createTokenIdentity"
  ): TypedContractMethod<
    [_token: AddressLike, _tokenOwner: AddressLike, _salt: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getIdentity"
  ): TypedContractMethod<[_wallet: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getToken"
  ): TypedContractMethod<[_identity: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWallets"
  ): TypedContractMethod<[_identity: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "implementationAuthority"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isSaltTaken"
  ): TypedContractMethod<[_salt: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenFactory"
  ): TypedContractMethod<[_factory: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "linkWallet"
  ): TypedContractMethod<[_newWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeTokenFactory"
  ): TypedContractMethod<[_factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unlinkWallet"
  ): TypedContractMethod<[_oldWallet: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Deployed"
  ): TypedContractEvent<
    DeployedEvent.InputTuple,
    DeployedEvent.OutputTuple,
    DeployedEvent.OutputObject
  >;
  getEvent(
    key: "TokenFactoryAdded"
  ): TypedContractEvent<
    TokenFactoryAddedEvent.InputTuple,
    TokenFactoryAddedEvent.OutputTuple,
    TokenFactoryAddedEvent.OutputObject
  >;
  getEvent(
    key: "TokenFactoryRemoved"
  ): TypedContractEvent<
    TokenFactoryRemovedEvent.InputTuple,
    TokenFactoryRemovedEvent.OutputTuple,
    TokenFactoryRemovedEvent.OutputObject
  >;
  getEvent(
    key: "TokenLinked"
  ): TypedContractEvent<
    TokenLinkedEvent.InputTuple,
    TokenLinkedEvent.OutputTuple,
    TokenLinkedEvent.OutputObject
  >;
  getEvent(
    key: "WalletLinked"
  ): TypedContractEvent<
    WalletLinkedEvent.InputTuple,
    WalletLinkedEvent.OutputTuple,
    WalletLinkedEvent.OutputObject
  >;
  getEvent(
    key: "WalletUnlinked"
  ): TypedContractEvent<
    WalletUnlinkedEvent.InputTuple,
    WalletUnlinkedEvent.OutputTuple,
    WalletUnlinkedEvent.OutputObject
  >;

  filters: {
    "Deployed(address)": TypedContractEvent<
      DeployedEvent.InputTuple,
      DeployedEvent.OutputTuple,
      DeployedEvent.OutputObject
    >;
    Deployed: TypedContractEvent<
      DeployedEvent.InputTuple,
      DeployedEvent.OutputTuple,
      DeployedEvent.OutputObject
    >;

    "TokenFactoryAdded(address)": TypedContractEvent<
      TokenFactoryAddedEvent.InputTuple,
      TokenFactoryAddedEvent.OutputTuple,
      TokenFactoryAddedEvent.OutputObject
    >;
    TokenFactoryAdded: TypedContractEvent<
      TokenFactoryAddedEvent.InputTuple,
      TokenFactoryAddedEvent.OutputTuple,
      TokenFactoryAddedEvent.OutputObject
    >;

    "TokenFactoryRemoved(address)": TypedContractEvent<
      TokenFactoryRemovedEvent.InputTuple,
      TokenFactoryRemovedEvent.OutputTuple,
      TokenFactoryRemovedEvent.OutputObject
    >;
    TokenFactoryRemoved: TypedContractEvent<
      TokenFactoryRemovedEvent.InputTuple,
      TokenFactoryRemovedEvent.OutputTuple,
      TokenFactoryRemovedEvent.OutputObject
    >;

    "TokenLinked(address,address)": TypedContractEvent<
      TokenLinkedEvent.InputTuple,
      TokenLinkedEvent.OutputTuple,
      TokenLinkedEvent.OutputObject
    >;
    TokenLinked: TypedContractEvent<
      TokenLinkedEvent.InputTuple,
      TokenLinkedEvent.OutputTuple,
      TokenLinkedEvent.OutputObject
    >;

    "WalletLinked(address,address)": TypedContractEvent<
      WalletLinkedEvent.InputTuple,
      WalletLinkedEvent.OutputTuple,
      WalletLinkedEvent.OutputObject
    >;
    WalletLinked: TypedContractEvent<
      WalletLinkedEvent.InputTuple,
      WalletLinkedEvent.OutputTuple,
      WalletLinkedEvent.OutputObject
    >;

    "WalletUnlinked(address,address)": TypedContractEvent<
      WalletUnlinkedEvent.InputTuple,
      WalletUnlinkedEvent.OutputTuple,
      WalletUnlinkedEvent.OutputObject
    >;
    WalletUnlinked: TypedContractEvent<
      WalletUnlinkedEvent.InputTuple,
      WalletUnlinkedEvent.OutputTuple,
      WalletUnlinkedEvent.OutputObject
    >;
  };
}
