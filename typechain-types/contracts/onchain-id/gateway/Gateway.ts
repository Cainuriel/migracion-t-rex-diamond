/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface GatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approveSignature"
      | "approveSigner"
      | "approvedSigners"
      | "callFactory"
      | "deployIdentityForWallet"
      | "deployIdentityWithSalt"
      | "deployIdentityWithSaltAndManagementKeys"
      | "idFactory"
      | "owner"
      | "renounceOwnership"
      | "revokeSignature"
      | "revokeSigner"
      | "revokedSignatures"
      | "transferFactoryOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "SignatureApproved"
      | "SignatureRevoked"
      | "SignerApproved"
      | "SignerRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approveSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedSigners",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "callFactory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployIdentityForWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployIdentityWithSalt",
    values: [AddressLike, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deployIdentityWithSaltAndManagementKeys",
    values: [AddressLike, string, BytesLike[], BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "idFactory", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokedSignatures",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFactoryOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployIdentityForWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployIdentityWithSalt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployIdentityWithSaltAndManagementKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokedSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFactoryOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignatureApprovedEvent {
  export type InputTuple = [signature: BytesLike];
  export type OutputTuple = [signature: string];
  export interface OutputObject {
    signature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignatureRevokedEvent {
  export type InputTuple = [signature: BytesLike];
  export type OutputTuple = [signature: string];
  export interface OutputObject {
    signature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerApprovedEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerRevokedEvent {
  export type InputTuple = [signer: AddressLike];
  export type OutputTuple = [signer: string];
  export interface OutputObject {
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Gateway extends BaseContract {
  connect(runner?: ContractRunner | null): Gateway;
  waitForDeployment(): Promise<this>;

  interface: GatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approveSignature: TypedContractMethod<
    [signature: BytesLike],
    [void],
    "nonpayable"
  >;

  approveSigner: TypedContractMethod<
    [signer: AddressLike],
    [void],
    "nonpayable"
  >;

  approvedSigners: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  callFactory: TypedContractMethod<[data: BytesLike], [void], "nonpayable">;

  deployIdentityForWallet: TypedContractMethod<
    [identityOwner: AddressLike],
    [string],
    "nonpayable"
  >;

  deployIdentityWithSalt: TypedContractMethod<
    [
      identityOwner: AddressLike,
      salt: string,
      signatureExpiry: BigNumberish,
      signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  deployIdentityWithSaltAndManagementKeys: TypedContractMethod<
    [
      identityOwner: AddressLike,
      salt: string,
      managementKeys: BytesLike[],
      signatureExpiry: BigNumberish,
      signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  idFactory: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeSignature: TypedContractMethod<
    [signature: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeSigner: TypedContractMethod<
    [signer: AddressLike],
    [void],
    "nonpayable"
  >;

  revokedSignatures: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  transferFactoryOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approveSignature"
  ): TypedContractMethod<[signature: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveSigner"
  ): TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approvedSigners"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "callFactory"
  ): TypedContractMethod<[data: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deployIdentityForWallet"
  ): TypedContractMethod<[identityOwner: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "deployIdentityWithSalt"
  ): TypedContractMethod<
    [
      identityOwner: AddressLike,
      salt: string,
      signatureExpiry: BigNumberish,
      signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deployIdentityWithSaltAndManagementKeys"
  ): TypedContractMethod<
    [
      identityOwner: AddressLike,
      salt: string,
      managementKeys: BytesLike[],
      signatureExpiry: BigNumberish,
      signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "idFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeSignature"
  ): TypedContractMethod<[signature: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeSigner"
  ): TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokedSignatures"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferFactoryOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SignatureApproved"
  ): TypedContractEvent<
    SignatureApprovedEvent.InputTuple,
    SignatureApprovedEvent.OutputTuple,
    SignatureApprovedEvent.OutputObject
  >;
  getEvent(
    key: "SignatureRevoked"
  ): TypedContractEvent<
    SignatureRevokedEvent.InputTuple,
    SignatureRevokedEvent.OutputTuple,
    SignatureRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SignerApproved"
  ): TypedContractEvent<
    SignerApprovedEvent.InputTuple,
    SignerApprovedEvent.OutputTuple,
    SignerApprovedEvent.OutputObject
  >;
  getEvent(
    key: "SignerRevoked"
  ): TypedContractEvent<
    SignerRevokedEvent.InputTuple,
    SignerRevokedEvent.OutputTuple,
    SignerRevokedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SignatureApproved(bytes)": TypedContractEvent<
      SignatureApprovedEvent.InputTuple,
      SignatureApprovedEvent.OutputTuple,
      SignatureApprovedEvent.OutputObject
    >;
    SignatureApproved: TypedContractEvent<
      SignatureApprovedEvent.InputTuple,
      SignatureApprovedEvent.OutputTuple,
      SignatureApprovedEvent.OutputObject
    >;

    "SignatureRevoked(bytes)": TypedContractEvent<
      SignatureRevokedEvent.InputTuple,
      SignatureRevokedEvent.OutputTuple,
      SignatureRevokedEvent.OutputObject
    >;
    SignatureRevoked: TypedContractEvent<
      SignatureRevokedEvent.InputTuple,
      SignatureRevokedEvent.OutputTuple,
      SignatureRevokedEvent.OutputObject
    >;

    "SignerApproved(address)": TypedContractEvent<
      SignerApprovedEvent.InputTuple,
      SignerApprovedEvent.OutputTuple,
      SignerApprovedEvent.OutputObject
    >;
    SignerApproved: TypedContractEvent<
      SignerApprovedEvent.InputTuple,
      SignerApprovedEvent.OutputTuple,
      SignerApprovedEvent.OutputObject
    >;

    "SignerRevoked(address)": TypedContractEvent<
      SignerRevokedEvent.InputTuple,
      SignerRevokedEvent.OutputTuple,
      SignerRevokedEvent.OutputObject
    >;
    SignerRevoked: TypedContractEvent<
      SignerRevokedEvent.InputTuple,
      SignerRevokedEvent.OutputTuple,
      SignerRevokedEvent.OutputObject
    >;
  };
}
