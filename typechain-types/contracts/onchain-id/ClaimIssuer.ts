/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ClaimIssuerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addClaim"
      | "addKey"
      | "approve"
      | "execute"
      | "getClaim"
      | "getClaimIdsByTopic"
      | "getKey"
      | "getKeyPurposes"
      | "getKeysByPurpose"
      | "getRecoveredAddress"
      | "initialize"
      | "isClaimRevoked"
      | "isClaimValid"
      | "keyHasPurpose"
      | "removeClaim"
      | "removeKey"
      | "revokeClaim"
      | "revokeClaimBySignature"
      | "revokedClaims"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approved"
      | "ClaimAdded"
      | "ClaimChanged"
      | "ClaimRemoved"
      | "ClaimRevoked"
      | "Executed"
      | "ExecutionFailed"
      | "ExecutionRequested"
      | "KeyAdded"
      | "KeyRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addClaim",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      BytesLike,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addKey",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getClaim", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getClaimIdsByTopic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getKey", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getKeyPurposes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeysByPurpose",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecoveredAddress",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimRevoked",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimValid",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "keyHasPurpose",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeClaim",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeKey",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeClaim",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeClaimBySignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokedClaims",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addClaim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getClaim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimIdsByTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKeyPurposes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeysByPurpose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecoveredAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isClaimRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keyHasPurpose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeClaimBySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokedClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ApprovedEvent {
  export type InputTuple = [executionId: BigNumberish, approved: boolean];
  export type OutputTuple = [executionId: bigint, approved: boolean];
  export interface OutputObject {
    executionId: bigint;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimAddedEvent {
  export type InputTuple = [
    claimId: BytesLike,
    topic: BigNumberish,
    scheme: BigNumberish,
    issuer: AddressLike,
    signature: BytesLike,
    data: BytesLike,
    uri: string
  ];
  export type OutputTuple = [
    claimId: string,
    topic: bigint,
    scheme: bigint,
    issuer: string,
    signature: string,
    data: string,
    uri: string
  ];
  export interface OutputObject {
    claimId: string;
    topic: bigint;
    scheme: bigint;
    issuer: string;
    signature: string;
    data: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimChangedEvent {
  export type InputTuple = [
    claimId: BytesLike,
    topic: BigNumberish,
    scheme: BigNumberish,
    issuer: AddressLike,
    signature: BytesLike,
    data: BytesLike,
    uri: string
  ];
  export type OutputTuple = [
    claimId: string,
    topic: bigint,
    scheme: bigint,
    issuer: string,
    signature: string,
    data: string,
    uri: string
  ];
  export interface OutputObject {
    claimId: string;
    topic: bigint;
    scheme: bigint;
    issuer: string;
    signature: string;
    data: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRemovedEvent {
  export type InputTuple = [
    claimId: BytesLike,
    topic: BigNumberish,
    scheme: BigNumberish,
    issuer: AddressLike,
    signature: BytesLike,
    data: BytesLike,
    uri: string
  ];
  export type OutputTuple = [
    claimId: string,
    topic: bigint,
    scheme: bigint,
    issuer: string,
    signature: string,
    data: string,
    uri: string
  ];
  export interface OutputObject {
    claimId: string;
    topic: bigint;
    scheme: bigint;
    issuer: string;
    signature: string;
    data: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimRevokedEvent {
  export type InputTuple = [signature: BytesLike];
  export type OutputTuple = [signature: string];
  export interface OutputObject {
    signature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedEvent {
  export type InputTuple = [
    executionId: BigNumberish,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    executionId: bigint,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    executionId: bigint;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionFailedEvent {
  export type InputTuple = [
    executionId: BigNumberish,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    executionId: bigint,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    executionId: bigint;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionRequestedEvent {
  export type InputTuple = [
    executionId: BigNumberish,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    executionId: bigint,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    executionId: bigint;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyAddedEvent {
  export type InputTuple = [
    key: BytesLike,
    purpose: BigNumberish,
    keyType: BigNumberish
  ];
  export type OutputTuple = [key: string, purpose: bigint, keyType: bigint];
  export interface OutputObject {
    key: string;
    purpose: bigint;
    keyType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyRemovedEvent {
  export type InputTuple = [
    key: BytesLike,
    purpose: BigNumberish,
    keyType: BigNumberish
  ];
  export type OutputTuple = [key: string, purpose: bigint, keyType: bigint];
  export interface OutputObject {
    key: string;
    purpose: bigint;
    keyType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ClaimIssuer extends BaseContract {
  connect(runner?: ContractRunner | null): ClaimIssuer;
  waitForDeployment(): Promise<this>;

  interface: ClaimIssuerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addClaim: TypedContractMethod<
    [
      _topic: BigNumberish,
      _scheme: BigNumberish,
      _issuer: AddressLike,
      _signature: BytesLike,
      _data: BytesLike,
      _uri: string
    ],
    [string],
    "nonpayable"
  >;

  addKey: TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish, _type: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [_id: BigNumberish, _approve: boolean],
    [boolean],
    "nonpayable"
  >;

  execute: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [bigint],
    "payable"
  >;

  getClaim: TypedContractMethod<
    [_claimId: BytesLike],
    [
      [bigint, bigint, string, string, string, string] & {
        topic: bigint;
        scheme: bigint;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    ],
    "view"
  >;

  getClaimIdsByTopic: TypedContractMethod<
    [_topic: BigNumberish],
    [string[]],
    "view"
  >;

  getKey: TypedContractMethod<
    [_key: BytesLike],
    [
      [bigint[], bigint, string] & {
        purposes: bigint[];
        keyType: bigint;
        key: string;
      }
    ],
    "view"
  >;

  getKeyPurposes: TypedContractMethod<[_key: BytesLike], [bigint[]], "view">;

  getKeysByPurpose: TypedContractMethod<
    [_purpose: BigNumberish],
    [string[]],
    "view"
  >;

  getRecoveredAddress: TypedContractMethod<
    [sig: BytesLike, dataHash: BytesLike],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [initialManagementKey: AddressLike],
    [void],
    "nonpayable"
  >;

  isClaimRevoked: TypedContractMethod<[_sig: BytesLike], [boolean], "view">;

  isClaimValid: TypedContractMethod<
    [
      _identity: AddressLike,
      claimTopic: BigNumberish,
      sig: BytesLike,
      data: BytesLike
    ],
    [boolean],
    "view"
  >;

  keyHasPurpose: TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish],
    [boolean],
    "view"
  >;

  removeClaim: TypedContractMethod<
    [_claimId: BytesLike],
    [boolean],
    "nonpayable"
  >;

  removeKey: TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  revokeClaim: TypedContractMethod<
    [_claimId: BytesLike, _identity: AddressLike],
    [boolean],
    "nonpayable"
  >;

  revokeClaimBySignature: TypedContractMethod<
    [signature: BytesLike],
    [void],
    "nonpayable"
  >;

  revokedClaims: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addClaim"
  ): TypedContractMethod<
    [
      _topic: BigNumberish,
      _scheme: BigNumberish,
      _issuer: AddressLike,
      _signature: BytesLike,
      _data: BytesLike,
      _uri: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addKey"
  ): TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish, _type: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [_id: BigNumberish, _approve: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getClaim"
  ): TypedContractMethod<
    [_claimId: BytesLike],
    [
      [bigint, bigint, string, string, string, string] & {
        topic: bigint;
        scheme: bigint;
        issuer: string;
        signature: string;
        data: string;
        uri: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimIdsByTopic"
  ): TypedContractMethod<[_topic: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getKey"
  ): TypedContractMethod<
    [_key: BytesLike],
    [
      [bigint[], bigint, string] & {
        purposes: bigint[];
        keyType: bigint;
        key: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getKeyPurposes"
  ): TypedContractMethod<[_key: BytesLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getKeysByPurpose"
  ): TypedContractMethod<[_purpose: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRecoveredAddress"
  ): TypedContractMethod<
    [sig: BytesLike, dataHash: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [initialManagementKey: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isClaimRevoked"
  ): TypedContractMethod<[_sig: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isClaimValid"
  ): TypedContractMethod<
    [
      _identity: AddressLike,
      claimTopic: BigNumberish,
      sig: BytesLike,
      data: BytesLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "keyHasPurpose"
  ): TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeClaim"
  ): TypedContractMethod<[_claimId: BytesLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "removeKey"
  ): TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeClaim"
  ): TypedContractMethod<
    [_claimId: BytesLike, _identity: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeClaimBySignature"
  ): TypedContractMethod<[signature: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokedClaims"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Approved"
  ): TypedContractEvent<
    ApprovedEvent.InputTuple,
    ApprovedEvent.OutputTuple,
    ApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimAdded"
  ): TypedContractEvent<
    ClaimAddedEvent.InputTuple,
    ClaimAddedEvent.OutputTuple,
    ClaimAddedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimChanged"
  ): TypedContractEvent<
    ClaimChangedEvent.InputTuple,
    ClaimChangedEvent.OutputTuple,
    ClaimChangedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRemoved"
  ): TypedContractEvent<
    ClaimRemovedEvent.InputTuple,
    ClaimRemovedEvent.OutputTuple,
    ClaimRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimRevoked"
  ): TypedContractEvent<
    ClaimRevokedEvent.InputTuple,
    ClaimRevokedEvent.OutputTuple,
    ClaimRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Executed"
  ): TypedContractEvent<
    ExecutedEvent.InputTuple,
    ExecutedEvent.OutputTuple,
    ExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionFailed"
  ): TypedContractEvent<
    ExecutionFailedEvent.InputTuple,
    ExecutionFailedEvent.OutputTuple,
    ExecutionFailedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionRequested"
  ): TypedContractEvent<
    ExecutionRequestedEvent.InputTuple,
    ExecutionRequestedEvent.OutputTuple,
    ExecutionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "KeyAdded"
  ): TypedContractEvent<
    KeyAddedEvent.InputTuple,
    KeyAddedEvent.OutputTuple,
    KeyAddedEvent.OutputObject
  >;
  getEvent(
    key: "KeyRemoved"
  ): TypedContractEvent<
    KeyRemovedEvent.InputTuple,
    KeyRemovedEvent.OutputTuple,
    KeyRemovedEvent.OutputObject
  >;

  filters: {
    "Approved(uint256,bool)": TypedContractEvent<
      ApprovedEvent.InputTuple,
      ApprovedEvent.OutputTuple,
      ApprovedEvent.OutputObject
    >;
    Approved: TypedContractEvent<
      ApprovedEvent.InputTuple,
      ApprovedEvent.OutputTuple,
      ApprovedEvent.OutputObject
    >;

    "ClaimAdded(bytes32,uint256,uint256,address,bytes,bytes,string)": TypedContractEvent<
      ClaimAddedEvent.InputTuple,
      ClaimAddedEvent.OutputTuple,
      ClaimAddedEvent.OutputObject
    >;
    ClaimAdded: TypedContractEvent<
      ClaimAddedEvent.InputTuple,
      ClaimAddedEvent.OutputTuple,
      ClaimAddedEvent.OutputObject
    >;

    "ClaimChanged(bytes32,uint256,uint256,address,bytes,bytes,string)": TypedContractEvent<
      ClaimChangedEvent.InputTuple,
      ClaimChangedEvent.OutputTuple,
      ClaimChangedEvent.OutputObject
    >;
    ClaimChanged: TypedContractEvent<
      ClaimChangedEvent.InputTuple,
      ClaimChangedEvent.OutputTuple,
      ClaimChangedEvent.OutputObject
    >;

    "ClaimRemoved(bytes32,uint256,uint256,address,bytes,bytes,string)": TypedContractEvent<
      ClaimRemovedEvent.InputTuple,
      ClaimRemovedEvent.OutputTuple,
      ClaimRemovedEvent.OutputObject
    >;
    ClaimRemoved: TypedContractEvent<
      ClaimRemovedEvent.InputTuple,
      ClaimRemovedEvent.OutputTuple,
      ClaimRemovedEvent.OutputObject
    >;

    "ClaimRevoked(bytes)": TypedContractEvent<
      ClaimRevokedEvent.InputTuple,
      ClaimRevokedEvent.OutputTuple,
      ClaimRevokedEvent.OutputObject
    >;
    ClaimRevoked: TypedContractEvent<
      ClaimRevokedEvent.InputTuple,
      ClaimRevokedEvent.OutputTuple,
      ClaimRevokedEvent.OutputObject
    >;

    "Executed(uint256,address,uint256,bytes)": TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;
    Executed: TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;

    "ExecutionFailed(uint256,address,uint256,bytes)": TypedContractEvent<
      ExecutionFailedEvent.InputTuple,
      ExecutionFailedEvent.OutputTuple,
      ExecutionFailedEvent.OutputObject
    >;
    ExecutionFailed: TypedContractEvent<
      ExecutionFailedEvent.InputTuple,
      ExecutionFailedEvent.OutputTuple,
      ExecutionFailedEvent.OutputObject
    >;

    "ExecutionRequested(uint256,address,uint256,bytes)": TypedContractEvent<
      ExecutionRequestedEvent.InputTuple,
      ExecutionRequestedEvent.OutputTuple,
      ExecutionRequestedEvent.OutputObject
    >;
    ExecutionRequested: TypedContractEvent<
      ExecutionRequestedEvent.InputTuple,
      ExecutionRequestedEvent.OutputTuple,
      ExecutionRequestedEvent.OutputObject
    >;

    "KeyAdded(bytes32,uint256,uint256)": TypedContractEvent<
      KeyAddedEvent.InputTuple,
      KeyAddedEvent.OutputTuple,
      KeyAddedEvent.OutputObject
    >;
    KeyAdded: TypedContractEvent<
      KeyAddedEvent.InputTuple,
      KeyAddedEvent.OutputTuple,
      KeyAddedEvent.OutputObject
    >;

    "KeyRemoved(bytes32,uint256,uint256)": TypedContractEvent<
      KeyRemovedEvent.InputTuple,
      KeyRemovedEvent.OutputTuple,
      KeyRemovedEvent.OutputObject
    >;
    KeyRemoved: TypedContractEvent<
      KeyRemovedEvent.InputTuple,
      KeyRemovedEvent.OutputTuple,
      KeyRemovedEvent.OutputObject
    >;
  };
}
