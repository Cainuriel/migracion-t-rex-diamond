/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface VerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addClaimTopic"
      | "addTrustedIssuer"
      | "claimTopicsToTrustedIssuers"
      | "getTrustedIssuerClaimTopics"
      | "getTrustedIssuers"
      | "getTrustedIssuersForClaimTopic"
      | "hasClaimTopic"
      | "isClaimTopicRequired"
      | "isTrustedIssuer"
      | "owner"
      | "removeClaimTopic"
      | "removeTrustedIssuer"
      | "renounceOwnership"
      | "requiredClaimTopics"
      | "transferOwnership"
      | "trustedIssuerClaimTopics"
      | "trustedIssuers"
      | "updateIssuerClaimTopics"
      | "verify"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimTopicAdded"
      | "ClaimTopicRemoved"
      | "ClaimTopicsUpdated"
      | "OwnershipTransferred"
      | "TrustedIssuerAdded"
      | "TrustedIssuerRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addClaimTopic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTrustedIssuer",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTopicsToTrustedIssuers",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedIssuerClaimTopics",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedIssuers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedIssuersForClaimTopic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimTopic",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isClaimTopicRequired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeClaimTopic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTrustedIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredClaimTopics",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedIssuerClaimTopics",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedIssuers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateIssuerClaimTopics",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "verify", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "addClaimTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTopicsToTrustedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedIssuerClaimTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedIssuersForClaimTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasClaimTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isClaimTopicRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeClaimTopic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTrustedIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredClaimTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedIssuerClaimTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedIssuers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateIssuerClaimTopics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export namespace ClaimTopicAddedEvent {
  export type InputTuple = [claimTopic: BigNumberish];
  export type OutputTuple = [claimTopic: bigint];
  export interface OutputObject {
    claimTopic: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimTopicRemovedEvent {
  export type InputTuple = [claimTopic: BigNumberish];
  export type OutputTuple = [claimTopic: bigint];
  export interface OutputObject {
    claimTopic: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimTopicsUpdatedEvent {
  export type InputTuple = [
    trustedIssuer: AddressLike,
    claimTopics: BigNumberish[]
  ];
  export type OutputTuple = [trustedIssuer: string, claimTopics: bigint[]];
  export interface OutputObject {
    trustedIssuer: string;
    claimTopics: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedIssuerAddedEvent {
  export type InputTuple = [
    trustedIssuer: AddressLike,
    claimTopics: BigNumberish[]
  ];
  export type OutputTuple = [trustedIssuer: string, claimTopics: bigint[]];
  export interface OutputObject {
    trustedIssuer: string;
    claimTopics: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedIssuerRemovedEvent {
  export type InputTuple = [trustedIssuer: AddressLike];
  export type OutputTuple = [trustedIssuer: string];
  export interface OutputObject {
    trustedIssuer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Verifier extends BaseContract {
  connect(runner?: ContractRunner | null): Verifier;
  waitForDeployment(): Promise<this>;

  interface: VerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addClaimTopic: TypedContractMethod<
    [claimTopic: BigNumberish],
    [void],
    "nonpayable"
  >;

  addTrustedIssuer: TypedContractMethod<
    [trustedIssuer: AddressLike, claimTopics: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  claimTopicsToTrustedIssuers: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  getTrustedIssuerClaimTopics: TypedContractMethod<
    [trustedIssuer: AddressLike],
    [bigint[]],
    "view"
  >;

  getTrustedIssuers: TypedContractMethod<[], [string[]], "view">;

  getTrustedIssuersForClaimTopic: TypedContractMethod<
    [claimTopic: BigNumberish],
    [string[]],
    "view"
  >;

  hasClaimTopic: TypedContractMethod<
    [issuer: AddressLike, claimTopic: BigNumberish],
    [boolean],
    "view"
  >;

  isClaimTopicRequired: TypedContractMethod<
    [claimTopic: BigNumberish],
    [boolean],
    "view"
  >;

  isTrustedIssuer: TypedContractMethod<
    [issuer: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeClaimTopic: TypedContractMethod<
    [claimTopic: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeTrustedIssuer: TypedContractMethod<
    [trustedIssuer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requiredClaimTopics: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedIssuerClaimTopics: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  trustedIssuers: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  updateIssuerClaimTopics: TypedContractMethod<
    [trustedIssuer: AddressLike, newClaimTopics: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  verify: TypedContractMethod<[identity: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addClaimTopic"
  ): TypedContractMethod<[claimTopic: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addTrustedIssuer"
  ): TypedContractMethod<
    [trustedIssuer: AddressLike, claimTopics: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimTopicsToTrustedIssuers"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrustedIssuerClaimTopics"
  ): TypedContractMethod<[trustedIssuer: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTrustedIssuers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTrustedIssuersForClaimTopic"
  ): TypedContractMethod<[claimTopic: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "hasClaimTopic"
  ): TypedContractMethod<
    [issuer: AddressLike, claimTopic: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isClaimTopicRequired"
  ): TypedContractMethod<[claimTopic: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTrustedIssuer"
  ): TypedContractMethod<[issuer: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeClaimTopic"
  ): TypedContractMethod<[claimTopic: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeTrustedIssuer"
  ): TypedContractMethod<[trustedIssuer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requiredClaimTopics"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedIssuerClaimTopics"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "trustedIssuers"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "updateIssuerClaimTopics"
  ): TypedContractMethod<
    [trustedIssuer: AddressLike, newClaimTopics: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<[identity: AddressLike], [boolean], "view">;

  getEvent(
    key: "ClaimTopicAdded"
  ): TypedContractEvent<
    ClaimTopicAddedEvent.InputTuple,
    ClaimTopicAddedEvent.OutputTuple,
    ClaimTopicAddedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimTopicRemoved"
  ): TypedContractEvent<
    ClaimTopicRemovedEvent.InputTuple,
    ClaimTopicRemovedEvent.OutputTuple,
    ClaimTopicRemovedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimTopicsUpdated"
  ): TypedContractEvent<
    ClaimTopicsUpdatedEvent.InputTuple,
    ClaimTopicsUpdatedEvent.OutputTuple,
    ClaimTopicsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TrustedIssuerAdded"
  ): TypedContractEvent<
    TrustedIssuerAddedEvent.InputTuple,
    TrustedIssuerAddedEvent.OutputTuple,
    TrustedIssuerAddedEvent.OutputObject
  >;
  getEvent(
    key: "TrustedIssuerRemoved"
  ): TypedContractEvent<
    TrustedIssuerRemovedEvent.InputTuple,
    TrustedIssuerRemovedEvent.OutputTuple,
    TrustedIssuerRemovedEvent.OutputObject
  >;

  filters: {
    "ClaimTopicAdded(uint256)": TypedContractEvent<
      ClaimTopicAddedEvent.InputTuple,
      ClaimTopicAddedEvent.OutputTuple,
      ClaimTopicAddedEvent.OutputObject
    >;
    ClaimTopicAdded: TypedContractEvent<
      ClaimTopicAddedEvent.InputTuple,
      ClaimTopicAddedEvent.OutputTuple,
      ClaimTopicAddedEvent.OutputObject
    >;

    "ClaimTopicRemoved(uint256)": TypedContractEvent<
      ClaimTopicRemovedEvent.InputTuple,
      ClaimTopicRemovedEvent.OutputTuple,
      ClaimTopicRemovedEvent.OutputObject
    >;
    ClaimTopicRemoved: TypedContractEvent<
      ClaimTopicRemovedEvent.InputTuple,
      ClaimTopicRemovedEvent.OutputTuple,
      ClaimTopicRemovedEvent.OutputObject
    >;

    "ClaimTopicsUpdated(address,uint256[])": TypedContractEvent<
      ClaimTopicsUpdatedEvent.InputTuple,
      ClaimTopicsUpdatedEvent.OutputTuple,
      ClaimTopicsUpdatedEvent.OutputObject
    >;
    ClaimTopicsUpdated: TypedContractEvent<
      ClaimTopicsUpdatedEvent.InputTuple,
      ClaimTopicsUpdatedEvent.OutputTuple,
      ClaimTopicsUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TrustedIssuerAdded(address,uint256[])": TypedContractEvent<
      TrustedIssuerAddedEvent.InputTuple,
      TrustedIssuerAddedEvent.OutputTuple,
      TrustedIssuerAddedEvent.OutputObject
    >;
    TrustedIssuerAdded: TypedContractEvent<
      TrustedIssuerAddedEvent.InputTuple,
      TrustedIssuerAddedEvent.OutputTuple,
      TrustedIssuerAddedEvent.OutputObject
    >;

    "TrustedIssuerRemoved(address)": TypedContractEvent<
      TrustedIssuerRemovedEvent.InputTuple,
      TrustedIssuerRemovedEvent.OutputTuple,
      TrustedIssuerRemovedEvent.OutputObject
    >;
    TrustedIssuerRemoved: TypedContractEvent<
      TrustedIssuerRemovedEvent.InputTuple,
      TrustedIssuerRemovedEvent.OutputTuple,
      TrustedIssuerRemovedEvent.OutputObject
    >;
  };
}
