/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IERC734Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "addKey"
      | "approve"
      | "execute"
      | "getKey"
      | "getKeyPurposes"
      | "getKeysByPurpose"
      | "keyHasPurpose"
      | "removeKey"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approved"
      | "Executed"
      | "ExecutionFailed"
      | "ExecutionRequested"
      | "KeyAdded"
      | "KeyRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addKey",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getKey", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getKeyPurposes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeysByPurpose",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keyHasPurpose",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeKey",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKeyPurposes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getKeysByPurpose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keyHasPurpose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeKey", data: BytesLike): Result;
}

export namespace ApprovedEvent {
  export type InputTuple = [executionId: BigNumberish, approved: boolean];
  export type OutputTuple = [executionId: bigint, approved: boolean];
  export interface OutputObject {
    executionId: bigint;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutedEvent {
  export type InputTuple = [
    executionId: BigNumberish,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    executionId: bigint,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    executionId: bigint;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionFailedEvent {
  export type InputTuple = [
    executionId: BigNumberish,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    executionId: bigint,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    executionId: bigint;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecutionRequestedEvent {
  export type InputTuple = [
    executionId: BigNumberish,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    executionId: bigint,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    executionId: bigint;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyAddedEvent {
  export type InputTuple = [
    key: BytesLike,
    purpose: BigNumberish,
    keyType: BigNumberish
  ];
  export type OutputTuple = [key: string, purpose: bigint, keyType: bigint];
  export interface OutputObject {
    key: string;
    purpose: bigint;
    keyType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyRemovedEvent {
  export type InputTuple = [
    key: BytesLike,
    purpose: BigNumberish,
    keyType: BigNumberish
  ];
  export type OutputTuple = [key: string, purpose: bigint, keyType: bigint];
  export interface OutputObject {
    key: string;
    purpose: bigint;
    keyType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IERC734 extends BaseContract {
  connect(runner?: ContractRunner | null): IERC734;
  waitForDeployment(): Promise<this>;

  interface: IERC734Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addKey: TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish, _keyType: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [_id: BigNumberish, _approve: boolean],
    [boolean],
    "nonpayable"
  >;

  execute: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [bigint],
    "payable"
  >;

  getKey: TypedContractMethod<
    [_key: BytesLike],
    [
      [bigint[], bigint, string] & {
        purposes: bigint[];
        keyType: bigint;
        key: string;
      }
    ],
    "view"
  >;

  getKeyPurposes: TypedContractMethod<[_key: BytesLike], [bigint[]], "view">;

  getKeysByPurpose: TypedContractMethod<
    [_purpose: BigNumberish],
    [string[]],
    "view"
  >;

  keyHasPurpose: TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish],
    [boolean],
    "view"
  >;

  removeKey: TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addKey"
  ): TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish, _keyType: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [_id: BigNumberish, _approve: boolean],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getKey"
  ): TypedContractMethod<
    [_key: BytesLike],
    [
      [bigint[], bigint, string] & {
        purposes: bigint[];
        keyType: bigint;
        key: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getKeyPurposes"
  ): TypedContractMethod<[_key: BytesLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getKeysByPurpose"
  ): TypedContractMethod<[_purpose: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "keyHasPurpose"
  ): TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeKey"
  ): TypedContractMethod<
    [_key: BytesLike, _purpose: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  getEvent(
    key: "Approved"
  ): TypedContractEvent<
    ApprovedEvent.InputTuple,
    ApprovedEvent.OutputTuple,
    ApprovedEvent.OutputObject
  >;
  getEvent(
    key: "Executed"
  ): TypedContractEvent<
    ExecutedEvent.InputTuple,
    ExecutedEvent.OutputTuple,
    ExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionFailed"
  ): TypedContractEvent<
    ExecutionFailedEvent.InputTuple,
    ExecutionFailedEvent.OutputTuple,
    ExecutionFailedEvent.OutputObject
  >;
  getEvent(
    key: "ExecutionRequested"
  ): TypedContractEvent<
    ExecutionRequestedEvent.InputTuple,
    ExecutionRequestedEvent.OutputTuple,
    ExecutionRequestedEvent.OutputObject
  >;
  getEvent(
    key: "KeyAdded"
  ): TypedContractEvent<
    KeyAddedEvent.InputTuple,
    KeyAddedEvent.OutputTuple,
    KeyAddedEvent.OutputObject
  >;
  getEvent(
    key: "KeyRemoved"
  ): TypedContractEvent<
    KeyRemovedEvent.InputTuple,
    KeyRemovedEvent.OutputTuple,
    KeyRemovedEvent.OutputObject
  >;

  filters: {
    "Approved(uint256,bool)": TypedContractEvent<
      ApprovedEvent.InputTuple,
      ApprovedEvent.OutputTuple,
      ApprovedEvent.OutputObject
    >;
    Approved: TypedContractEvent<
      ApprovedEvent.InputTuple,
      ApprovedEvent.OutputTuple,
      ApprovedEvent.OutputObject
    >;

    "Executed(uint256,address,uint256,bytes)": TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;
    Executed: TypedContractEvent<
      ExecutedEvent.InputTuple,
      ExecutedEvent.OutputTuple,
      ExecutedEvent.OutputObject
    >;

    "ExecutionFailed(uint256,address,uint256,bytes)": TypedContractEvent<
      ExecutionFailedEvent.InputTuple,
      ExecutionFailedEvent.OutputTuple,
      ExecutionFailedEvent.OutputObject
    >;
    ExecutionFailed: TypedContractEvent<
      ExecutionFailedEvent.InputTuple,
      ExecutionFailedEvent.OutputTuple,
      ExecutionFailedEvent.OutputObject
    >;

    "ExecutionRequested(uint256,address,uint256,bytes)": TypedContractEvent<
      ExecutionRequestedEvent.InputTuple,
      ExecutionRequestedEvent.OutputTuple,
      ExecutionRequestedEvent.OutputObject
    >;
    ExecutionRequested: TypedContractEvent<
      ExecutionRequestedEvent.InputTuple,
      ExecutionRequestedEvent.OutputTuple,
      ExecutionRequestedEvent.OutputObject
    >;

    "KeyAdded(bytes32,uint256,uint256)": TypedContractEvent<
      KeyAddedEvent.InputTuple,
      KeyAddedEvent.OutputTuple,
      KeyAddedEvent.OutputObject
    >;
    KeyAdded: TypedContractEvent<
      KeyAddedEvent.InputTuple,
      KeyAddedEvent.OutputTuple,
      KeyAddedEvent.OutputObject
    >;

    "KeyRemoved(bytes32,uint256,uint256)": TypedContractEvent<
      KeyRemovedEvent.InputTuple,
      KeyRemovedEvent.OutputTuple,
      KeyRemovedEvent.OutputObject
    >;
    KeyRemoved: TypedContractEvent<
      KeyRemovedEvent.InputTuple,
      KeyRemovedEvent.OutputTuple,
      KeyRemovedEvent.OutputObject
    >;
  };
}
